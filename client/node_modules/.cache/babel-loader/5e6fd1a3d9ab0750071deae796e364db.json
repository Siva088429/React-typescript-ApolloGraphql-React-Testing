{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript-graphql-master\\\\client\\\\src\\\\components\\\\funnel\\\\MyFunnelChart.tsx\";\nimport React from 'react';\nimport Funnel from 'react-funnel';\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\n//   const containerRef = useRef(null);\n\n//   const options = {\n//     width: 600,\n//     height: 400,\n//     bottomWidth: 1 / 3,\n//     bottomPinch: 1 / 3,\n//     isCurved: true,\n//     curveHeight: 20,\n//     fillType: 'solid',\n//     isInverted: false,\n//   };\n\n//   React.useEffect(() => {\n//     if (containerRef.current) {\n//       const chart = new FunnelGraph(containerRef.current, data, options);\n//       chart.draw();\n//     }\n//   }, [data]);\n\n//   return <div ref={containerRef} />;\n// };\n\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\n//   const containerRef = useRef(null);\n\n//   const options = {\n//     width: 600,\n//     height: 400,\n//     bottomWidth: 1 / 3,\n//     bottomPinch: 1 / 3,\n//     isCurved: true,\n//     curveHeight: 20,\n//     fillType: 'solid',\n//     isInverted: false,\n//   };\n\n//   React.useEffect(() => {\n//     if (containerRef.current && data) {\n//       const chart = new FunnelGraph(containerRef.current, data, options);\n//       chart.draw();\n//     }\n//   }, [data]);\n\n//   return <div ref={containerRef} />;\n// };\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\n//   const containerRef = useRef(null);\n\n//   React.useEffect(() => {\n//     if (containerRef.current && data) {\n//       const chart = new FunnelGraph(containerRef.current, data);\n//       chart.draw();\n//     }\n//   }, [data]);\n\n//   return <div ref={containerRef} />;\n// };\n\n// export default MyFunnelChart;\nconst data = [{\n  label: 'Step 1',\n  value: 100\n}, {\n  label: 'Step 2',\n  value: 80\n}, {\n  label: 'Step 3',\n  value: 60\n}, {\n  label: 'Step 4',\n  value: 40\n}, {\n  label: 'Step 5',\n  value: 20\n}, {\n  label: 'Step 6',\n  value: 10\n}];\nconst MyFunnelChart = () => {\n  return /*#__PURE__*/React.createElement(Funnel, {\n    data: data,\n    width: 600,\n    height: 400,\n    bottomWidth: 1 / 3,\n    bottomPinch: 1 / 3,\n    isCurved: true,\n    curveHeight: 20,\n    fillType: 'solid',\n    isInverted: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  });\n};\nexport default MyFunnelChart;","map":{"version":3,"names":["React","Funnel","data","label","value","MyFunnelChart"],"sources":["D:/react-typescript-graphql-master/client/src/components/funnel/MyFunnelChart.tsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport * as FunnelGraph from 'funnel-graph-js'; \r\nimport Funnel from 'react-funnel';\r\n\r\n\r\n\r\n\r\ninterface Props {\r\n  data: {label:string,value:number}[];\r\n}\r\n\r\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\r\n//   const containerRef = useRef(null);\r\n\r\n//   const options = {\r\n//     width: 600,\r\n//     height: 400,\r\n//     bottomWidth: 1 / 3,\r\n//     bottomPinch: 1 / 3,\r\n//     isCurved: true,\r\n//     curveHeight: 20,\r\n//     fillType: 'solid',\r\n//     isInverted: false,\r\n//   };\r\n\r\n//   React.useEffect(() => {\r\n//     if (containerRef.current) {\r\n//       const chart = new FunnelGraph(containerRef.current, data, options);\r\n//       chart.draw();\r\n//     }\r\n//   }, [data]);\r\n\r\n//   return <div ref={containerRef} />;\r\n// };\r\n\r\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\r\n//   const containerRef = useRef(null);\r\n\r\n//   const options = {\r\n//     width: 600,\r\n//     height: 400,\r\n//     bottomWidth: 1 / 3,\r\n//     bottomPinch: 1 / 3,\r\n//     isCurved: true,\r\n//     curveHeight: 20,\r\n//     fillType: 'solid',\r\n//     isInverted: false,\r\n//   };\r\n\r\n//   React.useEffect(() => {\r\n//     if (containerRef.current && data) {\r\n//       const chart = new FunnelGraph(containerRef.current, data, options);\r\n//       chart.draw();\r\n//     }\r\n//   }, [data]);\r\n\r\n//   return <div ref={containerRef} />;\r\n// };\r\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\r\n//   const containerRef = useRef(null);\r\n\r\n//   React.useEffect(() => {\r\n//     if (containerRef.current && data) {\r\n//       const chart = new FunnelGraph(containerRef.current, data);\r\n//       chart.draw();\r\n//     }\r\n//   }, [data]);\r\n\r\n//   return <div ref={containerRef} />;\r\n// };\r\n\r\n// export default MyFunnelChart;\r\nconst data = [\r\n  { label: 'Step 1', value: 100 },\r\n  { label: 'Step 2', value: 80 },\r\n  { label: 'Step 3', value: 60 },\r\n  { label: 'Step 4', value: 40 },\r\n  { label: 'Step 5', value: 20 },\r\n  { label: 'Step 6', value: 10 },\r\n];\r\n\r\nconst MyFunnelChart: React.FC = () => {\r\n  return (\r\n    <Funnel\r\n      data={data}\r\n      width={600}\r\n      height={400}\r\n      bottomWidth={1 / 3}\r\n      bottomPinch={1 / 3}\r\n      isCurved={true}\r\n      curveHeight={20}\r\n      fillType={'solid'}\r\n      isInverted={false}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MyFunnelChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAkB,OAAO;AAErC,OAAOC,MAAM,MAAM,cAAc;AASjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAMC,IAAI,GAAG,CACX;EAAEC,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAI,CAAC,EAC/B;EAAED,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAG,CAAC,EAC9B;EAAED,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAG,CAAC,EAC9B;EAAED,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAG,CAAC,EAC9B;EAAED,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAG,CAAC,EAC9B;EAAED,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAG,CAAC,CAC/B;AAED,MAAMC,aAAuB,GAAG,MAAM;EACpC,oBACE,oBAAC,MAAM;IACL,IAAI,EAAEH,IAAK;IACX,KAAK,EAAE,GAAI;IACX,MAAM,EAAE,GAAI;IACZ,WAAW,EAAE,CAAC,GAAG,CAAE;IACnB,WAAW,EAAE,CAAC,GAAG,CAAE;IACnB,QAAQ,EAAE,IAAK;IACf,WAAW,EAAE,EAAG;IAChB,QAAQ,EAAE,OAAQ;IAClB,UAAU,EAAE,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAClB;AAEN,CAAC;AAED,eAAeG,aAAa"},"metadata":{},"sourceType":"module"}