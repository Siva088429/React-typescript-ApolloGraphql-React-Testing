{"ast":null,"code":"/* eslint-disable no-trailing-spaces */\n/* global HTMLElement */\nimport { roundPoint, formatNumber } from './number';\nimport { createPath, createVerticalPath } from './path';\nimport { generateLegendBackground, getDefaultColors, createSVGElement, setAttrs, removeAttrs } from './graph';\nimport generateRandomIdString from './random';\nclass FunnelGraph {\n  constructor(options) {\n    this.containerSelector = options.container;\n    this.gradientDirection = options.gradientDirection && options.gradientDirection === 'vertical' ? 'vertical' : 'horizontal';\n    this.direction = options.direction && options.direction === 'vertical' ? 'vertical' : 'horizontal';\n    this.labels = FunnelGraph.getLabels(options);\n    this.subLabels = FunnelGraph.getSubLabels(options);\n    this.values = FunnelGraph.getValues(options);\n    this.percentages = this.createPercentages();\n    this.colors = options.data.colors || getDefaultColors(this.is2d() ? this.getSubDataSize() : 2);\n    this.displayPercent = options.displayPercent || false;\n    this.data = options.data;\n    this.height = options.height;\n    this.width = options.width;\n    this.subLabelValue = options.subLabelValue || 'percent';\n  }\n\n  /**\n  An example of a two-dimensional funnel graph\n  #0..................\n                     ...#1................\n                                         ......\n  #0********************#1**                    #2.........................#3 (A)\n                            *******************\n                                                #2*************************#3 (B)\n                                                #2+++++++++++++++++++++++++#3 (C)\n                            +++++++++++++++++++\n  #0++++++++++++++++++++#1++                    #2-------------------------#3 (D)\n                                         ------\n                     ---#1----------------\n  #0-----------------\n   Main axis is the primary axis of the graph.\n   In a horizontal graph it's the X axis, and Y is the cross axis.\n   However we use the names \"main\" and \"cross\" axis,\n   because in a vertical graph the primary axis is the Y axis\n   and the cross axis is the X axis.\n   First step of drawing the funnel graph is getting the coordinates of points,\n   that are used when drawing the paths.\n   There are 4 paths in the example above: A, B, C and D.\n   Such funnel has 3 labels and 3 subLabels.\n   This means that the main axis has 4 points (number of labels + 1)\n   One the ASCII illustrated graph above, those points are illustrated with a # symbol.\n  */\n  getMainAxisPoints() {\n    const size = this.getDataSize();\n    const points = [];\n    const fullDimension = this.isVertical() ? this.getHeight() : this.getWidth();\n    for (let i = 0; i <= size; i++) {\n      points.push(roundPoint(fullDimension * i / size));\n    }\n    return points;\n  }\n  getCrossAxisPoints() {\n    const points = [];\n    const fullDimension = this.getFullDimension();\n    // get half of the graph container height or width, since funnel shape is symmetric\n    // we use this when calculating the \"A\" shape\n    const dimension = fullDimension / 2;\n    if (this.is2d()) {\n      const totalValues = this.getValues2d();\n      const max = Math.max(...totalValues);\n\n      // duplicate last value\n      totalValues.push([...totalValues].pop());\n      // get points for path \"A\"\n      points.push(totalValues.map(value => roundPoint((max - value) / max * dimension)));\n      // percentages with duplicated last value\n      const percentagesFull = this.getPercentages2d();\n      const pointsOfFirstPath = points[0];\n      for (let i = 1; i < this.getSubDataSize(); i++) {\n        const p = points[i - 1];\n        const newPoints = [];\n        for (let j = 0; j < this.getDataSize(); j++) {\n          newPoints.push(roundPoint(\n          // eslint-disable-next-line comma-dangle\n          p[j] + (fullDimension - pointsOfFirstPath[j] * 2) * (percentagesFull[j][i - 1] / 100)));\n        }\n\n        // duplicate the last value as points #2 and #3 have the same value on the cross axis\n        newPoints.push([...newPoints].pop());\n        points.push(newPoints);\n      }\n\n      // add points for path \"D\", that is simply the \"inverted\" path \"A\"\n      points.push(pointsOfFirstPath.map(point => fullDimension - point));\n    } else {\n      // As you can see on the visualization above points #2 and #3 have the same cross axis coordinate\n      // so we duplicate the last value\n      const max = Math.max(...this.values);\n      const values = [...this.values].concat([...this.values].pop());\n      // if the graph is simple (not two-dimensional) then we have only paths \"A\" and \"D\"\n      // which are symmetric. So we get the points for \"A\" and then get points for \"D\" by subtracting \"A\"\n      // points from graph cross dimension length\n      points.push(values.map(value => roundPoint((max - value) / max * dimension)));\n      points.push(points[0].map(point => fullDimension - point));\n    }\n    return points;\n  }\n  getGraphType() {\n    return this.values && this.values[0] instanceof Array ? '2d' : 'normal';\n  }\n  is2d() {\n    return this.getGraphType() === '2d';\n  }\n  isVertical() {\n    return this.direction === 'vertical';\n  }\n  getDataSize() {\n    return this.values.length;\n  }\n  getSubDataSize() {\n    return this.values[0].length;\n  }\n  getFullDimension() {\n    return this.isVertical() ? this.getWidth() : this.getHeight();\n  }\n  static getSubLabels(options) {\n    if (!options.data) {\n      throw new Error('Data is missing');\n    }\n    const {\n      data\n    } = options;\n    if (typeof data.subLabels === 'undefined') return [];\n    return data.subLabels;\n  }\n  static getLabels(options) {\n    if (!options.data) {\n      throw new Error('Data is missing');\n    }\n    const {\n      data\n    } = options;\n    if (typeof data.labels === 'undefined') return [];\n    return data.labels;\n  }\n  addLabels() {\n    const holder = document.createElement('div');\n    holder.setAttribute('class', 'svg-funnel-js__labels');\n    this.percentages.forEach((percentage, index) => {\n      const labelElement = document.createElement('div');\n      labelElement.setAttribute('class', `svg-funnel-js__label label-${index + 1}`);\n      const title = document.createElement('div');\n      title.setAttribute('class', 'label__title');\n      title.textContent = this.labels[index] || '';\n      const value = document.createElement('div');\n      value.setAttribute('class', 'label__value');\n      const valueNumber = this.is2d() ? this.getValues2d()[index] : this.values[index];\n      value.textContent = formatNumber(valueNumber);\n      const percentageValue = document.createElement('div');\n      percentageValue.setAttribute('class', 'label__percentage');\n      percentageValue.textContent = `${percentage.toString()}%`;\n      labelElement.appendChild(value);\n      labelElement.appendChild(title);\n      if (this.displayPercent) {\n        labelElement.appendChild(percentageValue);\n      }\n      if (this.is2d()) {\n        const segmentPercentages = document.createElement('div');\n        segmentPercentages.setAttribute('class', 'label__segment-percentages');\n        let percentageList = '<ul class=\"segment-percentage__list\">';\n        const twoDimPercentages = this.getPercentages2d();\n        this.subLabels.forEach((subLabel, j) => {\n          const subLabelDisplayValue = this.subLabelValue === 'percent' ? `${twoDimPercentages[index][j]}%` : formatNumber(this.values[index][j]);\n          percentageList += `<li>${this.subLabels[j]}:\n    <span class=\"percentage__list-label\">${subLabelDisplayValue}</span>\n </li>`;\n        });\n        percentageList += '</ul>';\n        segmentPercentages.innerHTML = percentageList;\n        labelElement.appendChild(segmentPercentages);\n      }\n      holder.appendChild(labelElement);\n    });\n    this.container.appendChild(holder);\n  }\n  addSubLabels() {\n    if (this.subLabels) {\n      const subLabelsHolder = document.createElement('div');\n      subLabelsHolder.setAttribute('class', 'svg-funnel-js__subLabels');\n      let subLabelsHTML = '';\n      this.subLabels.forEach((subLabel, index) => {\n        subLabelsHTML += `<div class=\"svg-funnel-js__subLabel svg-funnel-js__subLabel-${index + 1}\">\n    <div class=\"svg-funnel-js__subLabel--color\"\n        style=\"${generateLegendBackground(this.colors[index], this.gradientDirection)}\"></div>\n    <div class=\"svg-funnel-js__subLabel--title\">${subLabel}</div>\n</div>`;\n      });\n      subLabelsHolder.innerHTML = subLabelsHTML;\n      this.container.appendChild(subLabelsHolder);\n    }\n  }\n  createContainer() {\n    if (!this.containerSelector) {\n      throw new Error('Container is missing');\n    }\n    if (typeof this.containerSelector === 'string') {\n      this.container = document.querySelector(this.containerSelector);\n      if (!this.container) {\n        throw new Error(`Container cannot be found (selector: ${this.containerSelector}).`);\n      }\n    } else if (this.container instanceof HTMLElement) {\n      this.container = this.containerSelector;\n    } else {\n      throw new Error('Container must either be a selector string or an HTMLElement.');\n    }\n    this.container.classList.add('svg-funnel-js');\n    this.graphContainer = document.createElement('div');\n    this.graphContainer.classList.add('svg-funnel-js__container');\n    this.container.appendChild(this.graphContainer);\n    if (this.direction === 'vertical') {\n      this.container.classList.add('svg-funnel-js--vertical');\n    }\n  }\n  setValues(v) {\n    this.values = v;\n    return this;\n  }\n  setDirection(d) {\n    this.direction = d;\n    return this;\n  }\n  setHeight(h) {\n    this.height = h;\n    return this;\n  }\n  setWidth(w) {\n    this.width = w;\n    return this;\n  }\n  static getValues(options) {\n    if (!options.data) {\n      return [];\n    }\n    const {\n      data\n    } = options;\n    if (typeof data === 'object') {\n      return data.values;\n    }\n    return [];\n  }\n  getValues2d() {\n    const values = [];\n    this.values.forEach(valueSet => {\n      values.push(valueSet.reduce((sum, value) => sum + value, 0));\n    });\n    return values;\n  }\n  getPercentages2d() {\n    const percentages = [];\n    this.values.forEach(valueSet => {\n      const total = valueSet.reduce((sum, value) => sum + value, 0);\n      percentages.push(valueSet.map(value => total === 0 ? 0 : roundPoint(value * 100 / total)));\n    });\n    return percentages;\n  }\n  createPercentages() {\n    let values = [];\n    if (this.is2d()) {\n      values = this.getValues2d();\n    } else {\n      values = [...this.values];\n    }\n    const max = Math.max(...values);\n    return values.map(value => value === 0 ? 0 : roundPoint(value * 100 / max));\n  }\n  applyGradient(svg, path, colors, index) {\n    const defs = svg.querySelector('defs') === null ? createSVGElement('defs', svg) : svg.querySelector('defs');\n    const gradientName = generateRandomIdString(`funnelGradient-${index}-`);\n    const gradient = createSVGElement('linearGradient', defs, {\n      id: gradientName\n    });\n    if (this.gradientDirection === 'vertical') {\n      setAttrs(gradient, {\n        x1: '0',\n        x2: '0',\n        y1: '0',\n        y2: '1'\n      });\n    }\n    const numberOfColors = colors.length;\n    for (let i = 0; i < numberOfColors; i++) {\n      createSVGElement('stop', gradient, {\n        'stop-color': colors[i],\n        offset: `${Math.round(100 * i / (numberOfColors - 1))}%`\n      });\n    }\n    setAttrs(path, {\n      fill: `url(\"#${gradientName}\")`,\n      stroke: `url(\"#${gradientName}\")`\n    });\n  }\n  makeSVG() {\n    const svg = createSVGElement('svg', this.graphContainer, {\n      width: this.getWidth(),\n      height: this.getHeight()\n    });\n    const valuesNum = this.getCrossAxisPoints().length - 1;\n    for (let i = 0; i < valuesNum; i++) {\n      const path = createSVGElement('path', svg);\n      const color = this.is2d() ? this.colors[i] : this.colors;\n      const fillMode = typeof color === 'string' || color.length === 1 ? 'solid' : 'gradient';\n      if (fillMode === 'solid') {\n        setAttrs(path, {\n          fill: color,\n          stroke: color\n        });\n      } else if (fillMode === 'gradient') {\n        this.applyGradient(svg, path, color, i + 1);\n      }\n      svg.appendChild(path);\n    }\n    this.graphContainer.appendChild(svg);\n  }\n  getSVG() {\n    const svg = this.container.querySelector('svg');\n    if (!svg) {\n      throw new Error('No SVG found inside of the container');\n    }\n    return svg;\n  }\n  getWidth() {\n    return this.width || this.graphContainer.clientWidth;\n  }\n  getHeight() {\n    return this.height || this.graphContainer.clientHeight;\n  }\n  getPathDefinitions() {\n    const valuesNum = this.getCrossAxisPoints().length - 1;\n    const paths = [];\n    for (let i = 0; i < valuesNum; i++) {\n      if (this.isVertical()) {\n        const X = this.getCrossAxisPoints()[i];\n        const XNext = this.getCrossAxisPoints()[i + 1];\n        const Y = this.getMainAxisPoints();\n        const d = createVerticalPath(i, X, XNext, Y);\n        paths.push(d);\n      } else {\n        const X = this.getMainAxisPoints();\n        const Y = this.getCrossAxisPoints()[i];\n        const YNext = this.getCrossAxisPoints()[i + 1];\n        const d = createPath(i, X, Y, YNext);\n        paths.push(d);\n      }\n    }\n    return paths;\n  }\n  getPathMedian(i) {\n    if (this.isVertical()) {\n      const cross = this.getCrossAxisPoints()[i];\n      const next = this.getCrossAxisPoints()[i + 1];\n      const Y = this.getMainAxisPoints();\n      const X = [];\n      const XNext = [];\n      cross.forEach((point, index) => {\n        const m = (point + next[index]) / 2;\n        X.push(m - 1);\n        XNext.push(m + 1);\n      });\n      return createVerticalPath(i, X, XNext, Y);\n    }\n    const X = this.getMainAxisPoints();\n    const cross = this.getCrossAxisPoints()[i];\n    const next = this.getCrossAxisPoints()[i + 1];\n    const Y = [];\n    const YNext = [];\n    cross.forEach((point, index) => {\n      const m = (point + next[index]) / 2;\n      Y.push(m - 1);\n      YNext.push(m + 1);\n    });\n    return createPath(i, X, Y, YNext);\n  }\n  drawPaths() {\n    const svg = this.getSVG();\n    const paths = svg.querySelectorAll('path');\n    const definitions = this.getPathDefinitions();\n    definitions.forEach((definition, index) => {\n      paths[index].setAttribute('d', definition);\n    });\n  }\n  draw() {\n    this.createContainer();\n    this.makeSVG();\n    this.addLabels();\n    if (this.is2d()) {\n      this.addSubLabels();\n    }\n    this.drawPaths();\n  }\n\n  /*\n      Methods\n   */\n\n  makeVertical() {\n    if (this.direction === 'vertical') return true;\n    this.direction = 'vertical';\n    this.container.classList.add('svg-funnel-js--vertical');\n    const svg = this.getSVG();\n    const height = this.getHeight();\n    const width = this.getWidth();\n    setAttrs(svg, {\n      height,\n      width\n    });\n    this.drawPaths();\n    return true;\n  }\n  makeHorizontal() {\n    if (this.direction === 'horizontal') return true;\n    this.direction = 'horizontal';\n    this.container.classList.remove('svg-funnel-js--vertical');\n    const svg = this.getSVG();\n    const height = this.getHeight();\n    const width = this.getWidth();\n    setAttrs(svg, {\n      height,\n      width\n    });\n    this.drawPaths();\n    return true;\n  }\n  toggleDirection() {\n    if (this.direction === 'horizontal') {\n      this.makeVertical();\n    } else {\n      this.makeHorizontal();\n    }\n  }\n  gradientMakeVertical() {\n    if (this.gradientDirection === 'vertical') return true;\n    this.gradientDirection = 'vertical';\n    const gradients = this.graphContainer.querySelectorAll('linearGradient');\n    for (let i = 0; i < gradients.length; i++) {\n      setAttrs(gradients[i], {\n        x1: '0',\n        x2: '0',\n        y1: '0',\n        y2: '1'\n      });\n    }\n    return true;\n  }\n  gradientMakeHorizontal() {\n    if (this.gradientDirection === 'horizontal') return true;\n    this.gradientDirection = 'horizontal';\n    const gradients = this.graphContainer.querySelectorAll('linearGradient');\n    for (let i = 0; i < gradients.length; i++) {\n      removeAttrs(gradients[i], 'x1', 'x2', 'y1', 'y2');\n    }\n    return true;\n  }\n  gradientToggleDirection() {\n    if (this.gradientDirection === 'horizontal') {\n      this.gradientMakeVertical();\n    } else {\n      this.gradientMakeHorizontal();\n    }\n  }\n  updateWidth(w) {\n    this.width = w;\n    const svg = this.getSVG();\n    const width = this.getWidth();\n    setAttrs(svg, {\n      width\n    });\n    this.drawPaths();\n    return true;\n  }\n  updateHeight(h) {\n    this.height = h;\n    const svg = this.getSVG();\n    const height = this.getHeight();\n    setAttrs(svg, {\n      height\n    });\n    this.drawPaths();\n    return true;\n  }\n\n  // @TODO: refactor data update\n  updateData(d) {\n    const labels = this.container.querySelector('.svg-funnel-js__labels');\n    const subLabels = this.container.querySelector('.svg-funnel-js__subLabels');\n    if (labels) labels.remove();\n    if (subLabels) subLabels.remove();\n    this.labels = [];\n    this.colors = getDefaultColors(this.is2d() ? this.getSubDataSize() : 2);\n    this.values = [];\n    this.percentages = [];\n    if (typeof d.labels !== 'undefined') {\n      this.labels = FunnelGraph.getLabels({\n        data: d\n      });\n    }\n    if (typeof d.colors !== 'undefined') {\n      this.colors = d.colors || getDefaultColors(this.is2d() ? this.getSubDataSize() : 2);\n    }\n    if (typeof d.values !== 'undefined') {\n      if (Object.prototype.toString.call(d.values[0]) !== Object.prototype.toString.call(this.values[0])) {\n        this.container.querySelector('svg').remove();\n        this.values = FunnelGraph.getValues({\n          data: d\n        });\n        this.makeSVG();\n      } else {\n        this.values = FunnelGraph.getValues({\n          data: d\n        });\n      }\n      this.drawPaths();\n    }\n    this.percentages = this.createPercentages();\n    this.addLabels();\n    if (typeof d.subLabels !== 'undefined') {\n      this.subLabels = FunnelGraph.getSubLabels({\n        data: d\n      });\n      this.addSubLabels();\n    }\n  }\n  update(o) {\n    if (typeof o.displayPercent !== 'undefined') {\n      if (this.displayPercent !== o.displayPercent) {\n        if (this.displayPercent === true) {\n          this.container.querySelectorAll('.label__percentage').forEach(label => {\n            label.remove();\n          });\n        } else {\n          this.container.querySelectorAll('.svg-funnel-js__label').forEach((label, index) => {\n            const percentage = this.percentages[index];\n            const percentageValue = document.createElement('div');\n            percentageValue.setAttribute('class', 'label__percentage');\n            if (percentage !== 100) {\n              percentageValue.textContent = `${percentage.toString()}%`;\n              label.appendChild(percentageValue);\n            }\n          });\n        }\n      }\n    }\n    if (typeof o.height !== 'undefined') {\n      this.updateHeight(o.height);\n    }\n    if (typeof o.width !== 'undefined') {\n      this.updateWidth(o.width);\n    }\n    if (typeof o.gradientDirection !== 'undefined') {\n      if (o.gradientDirection === 'vertical') {\n        this.gradientMakeVertical();\n      } else if (o.gradientDirection === 'horizontal') {\n        this.gradientMakeHorizontal();\n      }\n    }\n    if (typeof o.direction !== 'undefined') {\n      if (o.direction === 'vertical') {\n        this.makeVertical();\n      } else if (o.direction === 'horizontal') {\n        this.makeHorizontal();\n      }\n    }\n    if (typeof o.data !== 'undefined') {\n      this.updateData(o.data);\n    }\n  }\n}\nexport default FunnelGraph;","map":{"version":3,"names":["roundPoint","formatNumber","createPath","createVerticalPath","generateLegendBackground","getDefaultColors","createSVGElement","setAttrs","removeAttrs","generateRandomIdString","FunnelGraph","constructor","options","containerSelector","container","gradientDirection","direction","labels","getLabels","subLabels","getSubLabels","values","getValues","percentages","createPercentages","colors","data","is2d","getSubDataSize","displayPercent","height","width","subLabelValue","getMainAxisPoints","size","getDataSize","points","fullDimension","isVertical","getHeight","getWidth","i","push","getCrossAxisPoints","getFullDimension","dimension","totalValues","getValues2d","max","Math","pop","map","value","percentagesFull","getPercentages2d","pointsOfFirstPath","p","newPoints","j","point","concat","getGraphType","Array","length","Error","addLabels","holder","document","createElement","setAttribute","forEach","percentage","index","labelElement","title","textContent","valueNumber","percentageValue","toString","appendChild","segmentPercentages","percentageList","twoDimPercentages","subLabel","subLabelDisplayValue","innerHTML","addSubLabels","subLabelsHolder","subLabelsHTML","createContainer","querySelector","HTMLElement","classList","add","graphContainer","setValues","v","setDirection","d","setHeight","h","setWidth","w","valueSet","reduce","sum","total","applyGradient","svg","path","defs","gradientName","gradient","id","x1","x2","y1","y2","numberOfColors","offset","round","fill","stroke","makeSVG","valuesNum","color","fillMode","getSVG","clientWidth","clientHeight","getPathDefinitions","paths","X","XNext","Y","YNext","getPathMedian","cross","next","m","drawPaths","querySelectorAll","definitions","definition","draw","makeVertical","makeHorizontal","remove","toggleDirection","gradientMakeVertical","gradients","gradientMakeHorizontal","gradientToggleDirection","updateWidth","updateHeight","updateData","Object","prototype","call","update","o","label"],"sources":["D:/react-typescript-graphql-master/client/node_modules/funnel-graph-js/src/js/main.js"],"sourcesContent":["/* eslint-disable no-trailing-spaces */\n/* global HTMLElement */\nimport { roundPoint, formatNumber } from './number';\nimport { createPath, createVerticalPath } from './path';\nimport {\n    generateLegendBackground, getDefaultColors, createSVGElement, setAttrs, removeAttrs\n} from './graph';\nimport generateRandomIdString from './random';\n\nclass FunnelGraph {\n    constructor(options) {\n        this.containerSelector = options.container;\n        this.gradientDirection = (options.gradientDirection && options.gradientDirection === 'vertical')\n            ? 'vertical'\n            : 'horizontal';\n        this.direction = (options.direction && options.direction === 'vertical') ? 'vertical' : 'horizontal';\n        this.labels = FunnelGraph.getLabels(options);\n        this.subLabels = FunnelGraph.getSubLabels(options);\n        this.values = FunnelGraph.getValues(options);\n        this.percentages = this.createPercentages();\n        this.colors = options.data.colors || getDefaultColors(this.is2d() ? this.getSubDataSize() : 2);\n        this.displayPercent = options.displayPercent || false;\n        this.data = options.data;\n        this.height = options.height;\n        this.width = options.width;\n        this.subLabelValue = options.subLabelValue || 'percent';\n    }\n\n    /**\n    An example of a two-dimensional funnel graph\n    #0..................\n                       ...#1................\n                                           ......\n    #0********************#1**                    #2.........................#3 (A)\n                              *******************\n                                                  #2*************************#3 (B)\n                                                  #2+++++++++++++++++++++++++#3 (C)\n                              +++++++++++++++++++\n    #0++++++++++++++++++++#1++                    #2-------------------------#3 (D)\n                                           ------\n                       ---#1----------------\n    #0-----------------\n     Main axis is the primary axis of the graph.\n     In a horizontal graph it's the X axis, and Y is the cross axis.\n     However we use the names \"main\" and \"cross\" axis,\n     because in a vertical graph the primary axis is the Y axis\n     and the cross axis is the X axis.\n     First step of drawing the funnel graph is getting the coordinates of points,\n     that are used when drawing the paths.\n     There are 4 paths in the example above: A, B, C and D.\n     Such funnel has 3 labels and 3 subLabels.\n     This means that the main axis has 4 points (number of labels + 1)\n     One the ASCII illustrated graph above, those points are illustrated with a # symbol.\n    */\n    getMainAxisPoints() {\n        const size = this.getDataSize();\n        const points = [];\n        const fullDimension = this.isVertical() ? this.getHeight() : this.getWidth();\n        for (let i = 0; i <= size; i++) {\n            points.push(roundPoint(fullDimension * i / size));\n        }\n        return points;\n    }\n\n    getCrossAxisPoints() {\n        const points = [];\n        const fullDimension = this.getFullDimension();\n        // get half of the graph container height or width, since funnel shape is symmetric\n        // we use this when calculating the \"A\" shape\n        const dimension = fullDimension / 2;\n        if (this.is2d()) {\n            const totalValues = this.getValues2d();\n            const max = Math.max(...totalValues);\n\n            // duplicate last value\n            totalValues.push([...totalValues].pop());\n            // get points for path \"A\"\n            points.push(totalValues.map(value => roundPoint((max - value) / max * dimension)));\n            // percentages with duplicated last value\n            const percentagesFull = this.getPercentages2d();\n            const pointsOfFirstPath = points[0];\n\n            for (let i = 1; i < this.getSubDataSize(); i++) {\n                const p = points[i - 1];\n                const newPoints = [];\n\n                for (let j = 0; j < this.getDataSize(); j++) {\n                    newPoints.push(roundPoint(\n                        // eslint-disable-next-line comma-dangle\n                        p[j] + (fullDimension - pointsOfFirstPath[j] * 2) * (percentagesFull[j][i - 1] / 100)\n                    ));\n                }\n\n                // duplicate the last value as points #2 and #3 have the same value on the cross axis\n                newPoints.push([...newPoints].pop());\n                points.push(newPoints);\n            }\n\n            // add points for path \"D\", that is simply the \"inverted\" path \"A\"\n            points.push(pointsOfFirstPath.map(point => fullDimension - point));\n        } else {\n            // As you can see on the visualization above points #2 and #3 have the same cross axis coordinate\n            // so we duplicate the last value\n            const max = Math.max(...this.values);\n            const values = [...this.values].concat([...this.values].pop());\n            // if the graph is simple (not two-dimensional) then we have only paths \"A\" and \"D\"\n            // which are symmetric. So we get the points for \"A\" and then get points for \"D\" by subtracting \"A\"\n            // points from graph cross dimension length\n            points.push(values.map(value => roundPoint((max - value) / max * dimension)));\n            points.push(points[0].map(point => fullDimension - point));\n        }\n\n        return points;\n    }\n\n    getGraphType() {\n        return this.values && this.values[0] instanceof Array ? '2d' : 'normal';\n    }\n\n    is2d() {\n        return this.getGraphType() === '2d';\n    }\n\n    isVertical() {\n        return this.direction === 'vertical';\n    }\n\n    getDataSize() {\n        return this.values.length;\n    }\n\n    getSubDataSize() {\n        return this.values[0].length;\n    }\n\n    getFullDimension() {\n        return this.isVertical() ? this.getWidth() : this.getHeight();\n    }\n\n    static getSubLabels(options) {\n        if (!options.data) {\n            throw new Error('Data is missing');\n        }\n\n        const { data } = options;\n\n        if (typeof data.subLabels === 'undefined') return [];\n\n        return data.subLabels;\n    }\n\n    static getLabels(options) {\n        if (!options.data) {\n            throw new Error('Data is missing');\n        }\n\n        const { data } = options;\n\n        if (typeof data.labels === 'undefined') return [];\n\n        return data.labels;\n    }\n\n    addLabels() {\n        const holder = document.createElement('div');\n        holder.setAttribute('class', 'svg-funnel-js__labels');\n\n        this.percentages.forEach((percentage, index) => {\n            const labelElement = document.createElement('div');\n            labelElement.setAttribute('class', `svg-funnel-js__label label-${index + 1}`);\n\n            const title = document.createElement('div');\n            title.setAttribute('class', 'label__title');\n            title.textContent = this.labels[index] || '';\n\n            const value = document.createElement('div');\n            value.setAttribute('class', 'label__value');\n\n            const valueNumber = this.is2d() ? this.getValues2d()[index] : this.values[index];\n            value.textContent = formatNumber(valueNumber);\n\n            const percentageValue = document.createElement('div');\n            percentageValue.setAttribute('class', 'label__percentage');\n            percentageValue.textContent = `${percentage.toString()}%`;\n\n            labelElement.appendChild(value);\n            labelElement.appendChild(title);\n            if (this.displayPercent) {\n                labelElement.appendChild(percentageValue);\n            }\n\n            if (this.is2d()) {\n                const segmentPercentages = document.createElement('div');\n                segmentPercentages.setAttribute('class', 'label__segment-percentages');\n                let percentageList = '<ul class=\"segment-percentage__list\">';\n\n                const twoDimPercentages = this.getPercentages2d();\n\n                this.subLabels.forEach((subLabel, j) => {\n                    const subLabelDisplayValue = this.subLabelValue === 'percent'\n                        ? `${twoDimPercentages[index][j]}%`\n                        : formatNumber(this.values[index][j]);\n                    percentageList += `<li>${this.subLabels[j]}:\n    <span class=\"percentage__list-label\">${subLabelDisplayValue}</span>\n </li>`;\n                });\n                percentageList += '</ul>';\n                segmentPercentages.innerHTML = percentageList;\n                labelElement.appendChild(segmentPercentages);\n            }\n\n            holder.appendChild(labelElement);\n        });\n\n        this.container.appendChild(holder);\n    }\n\n    addSubLabels() {\n        if (this.subLabels) {\n            const subLabelsHolder = document.createElement('div');\n            subLabelsHolder.setAttribute('class', 'svg-funnel-js__subLabels');\n\n            let subLabelsHTML = '';\n\n            this.subLabels.forEach((subLabel, index) => {\n                subLabelsHTML += `<div class=\"svg-funnel-js__subLabel svg-funnel-js__subLabel-${index + 1}\">\n    <div class=\"svg-funnel-js__subLabel--color\"\n        style=\"${generateLegendBackground(this.colors[index], this.gradientDirection)}\"></div>\n    <div class=\"svg-funnel-js__subLabel--title\">${subLabel}</div>\n</div>`;\n            });\n\n            subLabelsHolder.innerHTML = subLabelsHTML;\n            this.container.appendChild(subLabelsHolder);\n        }\n    }\n\n    createContainer() {\n        if (!this.containerSelector) {\n            throw new Error('Container is missing');\n        }\n\n        if (typeof this.containerSelector === 'string') {\n            this.container = document.querySelector(this.containerSelector);\n            if (!this.container) {\n                throw new Error(`Container cannot be found (selector: ${this.containerSelector}).`);\n            }\n        } else if (this.container instanceof HTMLElement) {\n            this.container = this.containerSelector;\n        } else {\n            throw new Error('Container must either be a selector string or an HTMLElement.');\n        }\n\n        this.container.classList.add('svg-funnel-js');\n\n        this.graphContainer = document.createElement('div');\n        this.graphContainer.classList.add('svg-funnel-js__container');\n        this.container.appendChild(this.graphContainer);\n\n        if (this.direction === 'vertical') {\n            this.container.classList.add('svg-funnel-js--vertical');\n        }\n    }\n\n    setValues(v) {\n        this.values = v;\n        return this;\n    }\n\n    setDirection(d) {\n        this.direction = d;\n        return this;\n    }\n\n    setHeight(h) {\n        this.height = h;\n        return this;\n    }\n\n    setWidth(w) {\n        this.width = w;\n        return this;\n    }\n\n    static getValues(options) {\n        if (!options.data) {\n            return [];\n        }\n\n        const { data } = options;\n\n        if (typeof data === 'object') {\n            return data.values;\n        }\n\n        return [];\n    }\n\n    getValues2d() {\n        const values = [];\n\n        this.values.forEach((valueSet) => {\n            values.push(valueSet.reduce((sum, value) => sum + value, 0));\n        });\n\n        return values;\n    }\n\n    getPercentages2d() {\n        const percentages = [];\n\n        this.values.forEach((valueSet) => {\n            const total = valueSet.reduce((sum, value) => sum + value, 0);\n            percentages.push(valueSet.map(value => (total === 0 ? 0 : roundPoint(value * 100 / total))));\n        });\n\n        return percentages;\n    }\n\n    createPercentages() {\n        let values = [];\n\n        if (this.is2d()) {\n            values = this.getValues2d();\n        } else {\n            values = [...this.values];\n        }\n\n        const max = Math.max(...values);\n        return values.map(value => (value === 0 ? 0 : roundPoint(value * 100 / max)));\n    }\n\n    applyGradient(svg, path, colors, index) {\n        const defs = (svg.querySelector('defs') === null)\n            ? createSVGElement('defs', svg)\n            : svg.querySelector('defs');\n\n        const gradientName = generateRandomIdString(`funnelGradient-${index}-`);\n\n        const gradient = createSVGElement('linearGradient', defs, {\n            id: gradientName\n        });\n\n        if (this.gradientDirection === 'vertical') {\n            setAttrs(gradient, {\n                x1: '0',\n                x2: '0',\n                y1: '0',\n                y2: '1'\n            });\n        }\n\n        const numberOfColors = colors.length;\n\n        for (let i = 0; i < numberOfColors; i++) {\n            createSVGElement('stop', gradient, {\n                'stop-color': colors[i],\n                offset: `${Math.round(100 * i / (numberOfColors - 1))}%`\n            });\n        }\n\n        setAttrs(path, {\n            fill: `url(\"#${gradientName}\")`,\n            stroke: `url(\"#${gradientName}\")`\n        });\n    }\n\n    makeSVG() {\n        const svg = createSVGElement('svg', this.graphContainer, {\n            width: this.getWidth(),\n            height: this.getHeight()\n        });\n\n        const valuesNum = this.getCrossAxisPoints().length - 1;\n        for (let i = 0; i < valuesNum; i++) {\n            const path = createSVGElement('path', svg);\n\n            const color = (this.is2d()) ? this.colors[i] : this.colors;\n            const fillMode = (typeof color === 'string' || color.length === 1) ? 'solid' : 'gradient';\n\n            if (fillMode === 'solid') {\n                setAttrs(path, {\n                    fill: color,\n                    stroke: color\n                });\n            } else if (fillMode === 'gradient') {\n                this.applyGradient(svg, path, color, i + 1);\n            }\n\n            svg.appendChild(path);\n        }\n\n        this.graphContainer.appendChild(svg);\n    }\n\n    getSVG() {\n        const svg = this.container.querySelector('svg');\n\n        if (!svg) {\n            throw new Error('No SVG found inside of the container');\n        }\n\n        return svg;\n    }\n\n    getWidth() {\n        return this.width || this.graphContainer.clientWidth;\n    }\n\n    getHeight() {\n        return this.height || this.graphContainer.clientHeight;\n    }\n\n    getPathDefinitions() {\n        const valuesNum = this.getCrossAxisPoints().length - 1;\n        const paths = [];\n        for (let i = 0; i < valuesNum; i++) {\n            if (this.isVertical()) {\n                const X = this.getCrossAxisPoints()[i];\n                const XNext = this.getCrossAxisPoints()[i + 1];\n                const Y = this.getMainAxisPoints();\n\n                const d = createVerticalPath(i, X, XNext, Y);\n                paths.push(d);\n            } else {\n                const X = this.getMainAxisPoints();\n                const Y = this.getCrossAxisPoints()[i];\n                const YNext = this.getCrossAxisPoints()[i + 1];\n\n                const d = createPath(i, X, Y, YNext);\n                paths.push(d);\n            }\n        }\n\n        return paths;\n    }\n\n    getPathMedian(i) {\n        if (this.isVertical()) {\n            const cross = this.getCrossAxisPoints()[i];\n            const next = this.getCrossAxisPoints()[i + 1];\n            const Y = this.getMainAxisPoints();\n            const X = [];\n            const XNext = [];\n\n            cross.forEach((point, index) => {\n                const m = (point + next[index]) / 2;\n                X.push(m - 1);\n                XNext.push(m + 1);\n            });\n\n            return createVerticalPath(i, X, XNext, Y);\n        }\n\n        const X = this.getMainAxisPoints();\n        const cross = this.getCrossAxisPoints()[i];\n        const next = this.getCrossAxisPoints()[i + 1];\n        const Y = [];\n        const YNext = [];\n\n        cross.forEach((point, index) => {\n            const m = (point + next[index]) / 2;\n            Y.push(m - 1);\n            YNext.push(m + 1);\n        });\n\n        return createPath(i, X, Y, YNext);\n    }\n\n    drawPaths() {\n        const svg = this.getSVG();\n        const paths = svg.querySelectorAll('path');\n        const definitions = this.getPathDefinitions();\n\n        definitions.forEach((definition, index) => {\n            paths[index].setAttribute('d', definition);\n        });\n    }\n\n    draw() {\n        this.createContainer();\n        this.makeSVG();\n\n        this.addLabels();\n\n        if (this.is2d()) {\n            this.addSubLabels();\n        }\n\n        this.drawPaths();\n    }\n\n    /*\n        Methods\n     */\n\n    makeVertical() {\n        if (this.direction === 'vertical') return true;\n\n        this.direction = 'vertical';\n        this.container.classList.add('svg-funnel-js--vertical');\n\n        const svg = this.getSVG();\n        const height = this.getHeight();\n        const width = this.getWidth();\n        setAttrs(svg, { height, width });\n\n        this.drawPaths();\n\n        return true;\n    }\n\n    makeHorizontal() {\n        if (this.direction === 'horizontal') return true;\n\n        this.direction = 'horizontal';\n        this.container.classList.remove('svg-funnel-js--vertical');\n\n        const svg = this.getSVG();\n        const height = this.getHeight();\n        const width = this.getWidth();\n        setAttrs(svg, { height, width });\n\n        this.drawPaths();\n\n        return true;\n    }\n\n    toggleDirection() {\n        if (this.direction === 'horizontal') {\n            this.makeVertical();\n        } else {\n            this.makeHorizontal();\n        }\n    }\n\n    gradientMakeVertical() {\n        if (this.gradientDirection === 'vertical') return true;\n\n        this.gradientDirection = 'vertical';\n        const gradients = this.graphContainer.querySelectorAll('linearGradient');\n\n        for (let i = 0; i < gradients.length; i++) {\n            setAttrs(gradients[i], {\n                x1: '0',\n                x2: '0',\n                y1: '0',\n                y2: '1'\n            });\n        }\n\n        return true;\n    }\n\n    gradientMakeHorizontal() {\n        if (this.gradientDirection === 'horizontal') return true;\n\n        this.gradientDirection = 'horizontal';\n        const gradients = this.graphContainer.querySelectorAll('linearGradient');\n\n        for (let i = 0; i < gradients.length; i++) {\n            removeAttrs(gradients[i], 'x1', 'x2', 'y1', 'y2');\n        }\n\n        return true;\n    }\n\n    gradientToggleDirection() {\n        if (this.gradientDirection === 'horizontal') {\n            this.gradientMakeVertical();\n        } else {\n            this.gradientMakeHorizontal();\n        }\n    }\n\n    updateWidth(w) {\n        this.width = w;\n        const svg = this.getSVG();\n        const width = this.getWidth();\n        setAttrs(svg, { width });\n\n        this.drawPaths();\n\n        return true;\n    }\n\n    updateHeight(h) {\n        this.height = h;\n        const svg = this.getSVG();\n        const height = this.getHeight();\n        setAttrs(svg, { height });\n\n        this.drawPaths();\n\n        return true;\n    }\n\n    // @TODO: refactor data update\n    updateData(d) {\n        const labels = this.container.querySelector('.svg-funnel-js__labels');\n        const subLabels = this.container.querySelector('.svg-funnel-js__subLabels');\n\n        if (labels) labels.remove();\n        if (subLabels) subLabels.remove();\n\n        this.labels = [];\n        this.colors = getDefaultColors(this.is2d() ? this.getSubDataSize() : 2);\n        this.values = [];\n        this.percentages = [];\n\n        if (typeof d.labels !== 'undefined') {\n            this.labels = FunnelGraph.getLabels({ data: d });\n        }\n        if (typeof d.colors !== 'undefined') {\n            this.colors = d.colors || getDefaultColors(this.is2d() ? this.getSubDataSize() : 2);\n        }\n        if (typeof d.values !== 'undefined') {\n            if (Object.prototype.toString.call(d.values[0]) !== Object.prototype.toString.call(this.values[0])) {\n                this.container.querySelector('svg').remove();\n                this.values = FunnelGraph.getValues({ data: d });\n                this.makeSVG();\n            } else {\n                this.values = FunnelGraph.getValues({ data: d });\n            }\n            this.drawPaths();\n        }\n        this.percentages = this.createPercentages();\n\n        this.addLabels();\n\n        if (typeof d.subLabels !== 'undefined') {\n            this.subLabels = FunnelGraph.getSubLabels({ data: d });\n            this.addSubLabels();\n        }\n    }\n\n    update(o) {\n        if (typeof o.displayPercent !== 'undefined') {\n            if (this.displayPercent !== o.displayPercent) {\n                if (this.displayPercent === true) {\n                    this.container.querySelectorAll('.label__percentage').forEach((label) => {\n                        label.remove();\n                    });\n                } else {\n                    this.container.querySelectorAll('.svg-funnel-js__label').forEach((label, index) => {\n                        const percentage = this.percentages[index];\n                        const percentageValue = document.createElement('div');\n                        percentageValue.setAttribute('class', 'label__percentage');\n\n                        if (percentage !== 100) {\n                            percentageValue.textContent = `${percentage.toString()}%`;\n                            label.appendChild(percentageValue);\n                        }\n                    });\n                }\n            }\n        }\n        if (typeof o.height !== 'undefined') {\n            this.updateHeight(o.height);\n        }\n        if (typeof o.width !== 'undefined') {\n            this.updateWidth(o.width);\n        }\n        if (typeof o.gradientDirection !== 'undefined') {\n            if (o.gradientDirection === 'vertical') {\n                this.gradientMakeVertical();\n            } else if (o.gradientDirection === 'horizontal') {\n                this.gradientMakeHorizontal();\n            }\n        }\n        if (typeof o.direction !== 'undefined') {\n            if (o.direction === 'vertical') {\n                this.makeVertical();\n            } else if (o.direction === 'horizontal') {\n                this.makeHorizontal();\n            }\n        }\n        if (typeof o.data !== 'undefined') {\n            this.updateData(o.data);\n        }\n    }\n}\n\nexport default FunnelGraph;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}