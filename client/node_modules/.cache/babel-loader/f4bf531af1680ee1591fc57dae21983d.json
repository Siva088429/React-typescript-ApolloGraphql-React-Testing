{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\akula.s\\\\Downloads\\\\react-typescript-graphql-master (1)\\\\react-typescript-graphql-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\akula.s\\\\Downloads\\\\react-typescript-graphql-master (1)\\\\react-typescript-graphql-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\akula.s\\\\Downloads\\\\react-typescript-graphql-master (1)\\\\react-typescript-graphql-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import*as React from\"react\";import{useMutation,useApolloClient}from\"react-apollo\";import{AddContactMutation,UpdateContactMutation}from\"../../graphql/mutations/contact.mutations\";import{ContactDetailQuery,ContactListQuery}from\"../../graphql/queries/contact.queries\";var ContactCreation=function ContactCreation(props){var initialContcatState={id:0,name:\"\",email:\"\",dateOfBirth:\"\"};var client=useApolloClient();var _useMutation=useMutation(AddContactMutation),_useMutation2=_slicedToArray(_useMutation,1),addContact=_useMutation2[0];// contact is a state variable\nvar _React$useState=React.useState(initialContcatState),_React$useState2=_slicedToArray(_React$useState,2),contact=_React$useState2[0],setContact=_React$useState2[1];React.useEffect(function(){if(props.editContactId&&props.editContactId>0){client.query({query:ContactDetailQuery,variables:{id:props.editContactId}}).then(function(result){var contact=result.data.contact;setContact(contact);});}},[props.editContactId]);var handleReset=function handleReset(){setContact(initialContcatState);};var handleSubmit=function handleSubmit(e){e.preventDefault();// console.log(`ContactCreation::handleSubmit=>contact ${JSON.stringify(contact)}`);\nif(contact.id>0){client.mutate({mutation:UpdateContactMutation,variables:{id:contact.id,name:contact.name,email:contact.email,dateOfBirth:contact.dateOfBirth},refetchQueries:[{query:ContactListQuery}]}).then(function(result){var contact=result.data.contact;console.log(\"Updated successfully...\");});}else{addContact({variables:{name:contact.name,email:contact.email,dateOfBirth:contact.dateOfBirth},refetchQueries:[{query:ContactListQuery}]// to update ContactListQuery on ContactList.tsx\n});}handleReset();};/**\r\n   * Common input change event\r\n   * When the field is entered an event is raised and update the state\r\n   */var handleInputChange=function handleInputChange(e){e.preventDefault();var target=e.target;setContact(function(contact){return _objectSpread(_objectSpread({},contact),{},_defineProperty({},target.name,target.value));});};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(\"div\",{className:\"card bg-light mb-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card-header\"},\"New contact\"),/*#__PURE__*/React.createElement(\"div\",{className:\"card-body\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card-text\"},/*#__PURE__*/React.createElement(\"div\",{className:\"form-row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"form-group col-md-4\"},/*#__PURE__*/React.createElement(\"label\",null,\"Name\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"name\",value:contact.name,placeholder:\"Enter name\",className:\"form-control\",required:true,onChange:handleInputChange})),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group col-md-4\"},/*#__PURE__*/React.createElement(\"label\",null,\"Email address\"),/*#__PURE__*/React.createElement(\"input\",{type:\"email\",name:\"email\",value:contact.email,placeholder:\"Enter email\",className:\"form-control\",\"aria-describedby\":\"emailHelp\",required:true,onChange:handleInputChange}),/*#__PURE__*/React.createElement(\"small\",{id:\"emailHelp\",className:\"form-text text-muted\"},\"We'll never share your email with anyone else.\")),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group col-md-4\"},/*#__PURE__*/React.createElement(\"label\",null,\"Date of birth\"),/*#__PURE__*/React.createElement(\"input\",{type:\"date\",max:\"2020-12-01\",min:\"1900-12-01\",name:\"dateOfBirth\",value:contact.dateOfBirth,placeholder:\"Enter date of birth\",className:\"form-control\",required:true,onChange:handleInputChange}))),contact.id>0&&/*#__PURE__*/React.createElement(\"input\",{className:\"btn btn-outline-danger\",type:\"submit\",value:\"Update\"}),\" \",contact.id<=0&&/*#__PURE__*/React.createElement(\"input\",{className:\"btn btn-outline-primary\",type:\"submit\",value:\"Save\"}),\" \",/*#__PURE__*/React.createElement(\"input\",{className:\"btn btn-outline-warning\",type:\"button\",value:\"Reset\",onClick:handleReset}),\" \")))));};export default ContactCreation;","map":{"version":3,"names":["React","useMutation","useApolloClient","AddContactMutation","UpdateContactMutation","ContactDetailQuery","ContactListQuery","ContactCreation","props","initialContcatState","id","name","email","dateOfBirth","client","addContact","useState","contact","setContact","useEffect","editContactId","query","variables","then","result","data","handleReset","handleSubmit","e","preventDefault","mutate","mutation","refetchQueries","console","log","handleInputChange","target","value"],"sources":["C:/Users/akula.s/Downloads/react-typescript-graphql-master (1)/react-typescript-graphql-master/client/src/components/contact/contact.creation.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { useMutation, useApolloClient } from \"react-apollo\";\r\nimport { IContact } from \"../../models/contact\";\r\nimport { AddContactMutation, UpdateContactMutation } from \"../../graphql/mutations/contact.mutations\";\r\nimport { ContactDetailQuery, ContactListQuery } from \"../../graphql/queries/contact.queries\";\r\n\r\ninterface IOwnProps {\r\n  editContactId?: number;\r\n}\r\n\r\nconst ContactCreation: React.FunctionComponent<IOwnProps> = (\r\n  props: IOwnProps\r\n) => {\r\n  const initialContcatState: IContact = {\r\n    id: 0,\r\n    name: \"\",\r\n    email: \"\",\r\n    dateOfBirth: \"\"\r\n  };\r\n\r\n  const client = useApolloClient();\r\n  \r\n  const [addContact] = useMutation(AddContactMutation);\r\n\r\n  // contact is a state variable\r\n  const [contact, setContact] = React.useState(initialContcatState);\r\n\r\n  React.useEffect(() => {\r\n    if (props.editContactId && props.editContactId! > 0) {\r\n      client.query({query: ContactDetailQuery, variables: {id: props.editContactId}}).then(result => {\r\n        const contact = result.data.contact as IContact\r\n        setContact(contact)\r\n      });\r\n    }\r\n  }, [props.editContactId])\r\n\r\n  const handleReset = () => {\r\n    setContact(initialContcatState);\r\n  }\r\n\r\n  const handleSubmit = (\r\n    e: any // React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\r\n  ) => {\r\n    e.preventDefault();\r\n    // console.log(`ContactCreation::handleSubmit=>contact ${JSON.stringify(contact)}`);\r\n    if (contact.id > 0) {\r\n      client.mutate({mutation: UpdateContactMutation, variables: {\r\n        id: contact.id,\r\n        name: contact.name,\r\n        email: contact.email,\r\n        dateOfBirth: contact.dateOfBirth\r\n      }, refetchQueries: [{query: ContactListQuery}]}).then(result => {\r\n        const contact = result.data.contact as IContact\r\n        console.log(`Updated successfully...`)\r\n      });\r\n    } else {\r\n      addContact({\r\n        variables: {name: contact.name, email: contact.email, dateOfBirth: contact.dateOfBirth},\r\n        refetchQueries: [{query: ContactListQuery}] // to update ContactListQuery on ContactList.tsx\r\n      })\r\n    }\r\n    \r\n    handleReset();\r\n  };\r\n\r\n  /**\r\n   * Common input change event\r\n   * When the field is entered an event is raised and update the state\r\n   */\r\n  const handleInputChange = (\r\n    e: React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    const target = e.target as any;\r\n    setContact(contact => ({ ...contact, [target.name]: target.value }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"card bg-light mb-3\">\r\n          <div className=\"card-header\">New contact</div>\r\n          <div className=\"card-body\">\r\n            <div className=\"card-text\">\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={contact.name}\r\n                    placeholder=\"Enter name\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Email address</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={contact.email}\r\n                    placeholder=\"Enter email\"\r\n                    className=\"form-control\"\r\n                    aria-describedby=\"emailHelp\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </small>\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Date of birth</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    max=\"2020-12-01\"\r\n                    min=\"1900-12-01\"\r\n                    name=\"dateOfBirth\"\r\n                    value={contact.dateOfBirth}\r\n                    placeholder=\"Enter date of birth\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n              {contact.id > 0 && <input className=\"btn btn-outline-danger\" type=\"submit\" value=\"Update\" />}{` `}\r\n              {contact.id <= 0 && <input className=\"btn btn-outline-primary\" type=\"submit\" value=\"Save\" />}{` `}\r\n              <input className=\"btn btn-outline-warning\" type=\"button\" value=\"Reset\" onClick={handleReset} />{` `}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactCreation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}