{"ast":null,"code":"import { roundPoint } from './number';\nconst createCurves = (x1, y1, x2, y2) => ` C${roundPoint((x2 + x1) / 2)},${y1} ` + `${roundPoint((x2 + x1) / 2)},${y2} ${x2},${y2}`;\nconst createVerticalCurves = (x1, y1, x2, y2) => ` C${x1},${roundPoint((y2 + y1) / 2)} ` + `${x2},${roundPoint((y2 + y1) / 2)} ${x2},${y2}`;\n\n/*\n    A funnel segment is draw in a clockwise direction.\n    Path 1-2 is drawn,\n    then connected with a straight vertical line 2-3,\n    then a line 3-4 is draw (using YNext points going in backwards direction)\n    then path is closed (connected with the starting point 1).\n\n    1---------->2\n    ^           |\n    |           v\n    4<----------3\n\n    On the graph on line 20 it works like this:\n    A#0, A#1, A#2, A#3, B#3, B#2, B#1, B#0, close the path.\n\n    Points for path \"B\" are passed as the YNext param.\n */\n\nconst createPath = (index, X, Y, YNext) => {\n  let str = `M${X[0]},${Y[0]}`;\n  for (let i = 0; i < X.length - 1; i++) {\n    str += createCurves(X[i], Y[i], X[i + 1], Y[i + 1]);\n  }\n  str += ` L${[...X].pop()},${[...YNext].pop()}`;\n  for (let i = X.length - 1; i > 0; i--) {\n    str += createCurves(X[i], YNext[i], X[i - 1], YNext[i - 1]);\n  }\n  str += ' Z';\n  return str;\n};\n\n/*\n    In a vertical path we go counter-clockwise\n\n    1<----------4\n    |           ^\n    v           |\n    2---------->3\n */\n\nconst createVerticalPath = (index, X, XNext, Y) => {\n  let str = `M${X[0]},${Y[0]}`;\n  for (let i = 0; i < X.length - 1; i++) {\n    str += createVerticalCurves(X[i], Y[i], X[i + 1], Y[i + 1]);\n  }\n  str += ` L${[...XNext].pop()},${[...Y].pop()}`;\n  for (let i = X.length - 1; i > 0; i--) {\n    str += createVerticalCurves(XNext[i], Y[i], XNext[i - 1], Y[i - 1]);\n  }\n  str += ' Z';\n  return str;\n};\nexport { createCurves, createVerticalCurves, createPath, createVerticalPath };","map":{"version":3,"names":["roundPoint","createCurves","x1","y1","x2","y2","createVerticalCurves","createPath","index","X","Y","YNext","str","i","length","pop","createVerticalPath","XNext"],"sources":["D:/react-typescript-graphql-master/client/node_modules/funnel-graph-js/src/js/path.js"],"sourcesContent":["import { roundPoint } from './number';\n\nconst createCurves = (x1, y1, x2, y2) => ` C${roundPoint((x2 + x1) / 2)},${y1} `\n    + `${roundPoint((x2 + x1) / 2)},${y2} ${x2},${y2}`;\n\nconst createVerticalCurves = (x1, y1, x2, y2) => ` C${x1},${roundPoint((y2 + y1) / 2)} `\n    + `${x2},${roundPoint((y2 + y1) / 2)} ${x2},${y2}`;\n\n/*\n    A funnel segment is draw in a clockwise direction.\n    Path 1-2 is drawn,\n    then connected with a straight vertical line 2-3,\n    then a line 3-4 is draw (using YNext points going in backwards direction)\n    then path is closed (connected with the starting point 1).\n\n    1---------->2\n    ^           |\n    |           v\n    4<----------3\n\n    On the graph on line 20 it works like this:\n    A#0, A#1, A#2, A#3, B#3, B#2, B#1, B#0, close the path.\n\n    Points for path \"B\" are passed as the YNext param.\n */\n\nconst createPath = (index, X, Y, YNext) => {\n    let str = `M${X[0]},${Y[0]}`;\n\n    for (let i = 0; i < X.length - 1; i++) {\n        str += createCurves(X[i], Y[i], X[i + 1], Y[i + 1]);\n    }\n\n    str += ` L${[...X].pop()},${[...YNext].pop()}`;\n\n    for (let i = X.length - 1; i > 0; i--) {\n        str += createCurves(X[i], YNext[i], X[i - 1], YNext[i - 1]);\n    }\n\n    str += ' Z';\n\n    return str;\n};\n\n/*\n    In a vertical path we go counter-clockwise\n\n    1<----------4\n    |           ^\n    v           |\n    2---------->3\n */\n\nconst createVerticalPath = (index, X, XNext, Y) => {\n    let str = `M${X[0]},${Y[0]}`;\n\n    for (let i = 0; i < X.length - 1; i++) {\n        str += createVerticalCurves(X[i], Y[i], X[i + 1], Y[i + 1]);\n    }\n\n    str += ` L${[...XNext].pop()},${[...Y].pop()}`;\n\n    for (let i = X.length - 1; i > 0; i--) {\n        str += createVerticalCurves(XNext[i], Y[i], XNext[i - 1], Y[i - 1]);\n    }\n\n    str += ' Z';\n\n    return str;\n};\n\nexport {\n    createCurves, createVerticalCurves, createPath, createVerticalPath\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,UAAU;AAErC,MAAMC,YAAY,GAAG,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,KAAM,KAAIL,UAAU,CAAC,CAACI,EAAE,GAAGF,EAAE,IAAI,CAAC,CAAE,IAAGC,EAAG,GAAE,GACzE,GAAEH,UAAU,CAAC,CAACI,EAAE,GAAGF,EAAE,IAAI,CAAC,CAAE,IAAGG,EAAG,IAAGD,EAAG,IAAGC,EAAG,EAAC;AAEtD,MAAMC,oBAAoB,GAAG,CAACJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,KAAM,KAAIH,EAAG,IAAGF,UAAU,CAAC,CAACK,EAAE,GAAGF,EAAE,IAAI,CAAC,CAAE,GAAE,GACjF,GAAEC,EAAG,IAAGJ,UAAU,CAAC,CAACK,EAAE,GAAGF,EAAE,IAAI,CAAC,CAAE,IAAGC,EAAG,IAAGC,EAAG,EAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,UAAU,GAAG,CAACC,KAAK,EAAEC,CAAC,EAAEC,CAAC,EAAEC,KAAK,KAAK;EACvC,IAAIC,GAAG,GAAI,IAAGH,CAAC,CAAC,CAAC,CAAE,IAAGC,CAAC,CAAC,CAAC,CAAE,EAAC;EAE5B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;IACnCD,GAAG,IAAIX,YAAY,CAACQ,CAAC,CAACI,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,CAAC,EAAEJ,CAAC,CAACI,CAAC,GAAG,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC;EACvD;EAEAD,GAAG,IAAK,KAAI,CAAC,GAAGH,CAAC,CAAC,CAACM,GAAG,EAAG,IAAG,CAAC,GAAGJ,KAAK,CAAC,CAACI,GAAG,EAAG,EAAC;EAE9C,KAAK,IAAIF,CAAC,GAAGJ,CAAC,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACnCD,GAAG,IAAIX,YAAY,CAACQ,CAAC,CAACI,CAAC,CAAC,EAAEF,KAAK,CAACE,CAAC,CAAC,EAAEJ,CAAC,CAACI,CAAC,GAAG,CAAC,CAAC,EAAEF,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/D;EAEAD,GAAG,IAAI,IAAI;EAEX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,kBAAkB,GAAG,CAACR,KAAK,EAAEC,CAAC,EAAEQ,KAAK,EAAEP,CAAC,KAAK;EAC/C,IAAIE,GAAG,GAAI,IAAGH,CAAC,CAAC,CAAC,CAAE,IAAGC,CAAC,CAAC,CAAC,CAAE,EAAC;EAE5B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;IACnCD,GAAG,IAAIN,oBAAoB,CAACG,CAAC,CAACI,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,CAAC,EAAEJ,CAAC,CAACI,CAAC,GAAG,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/D;EAEAD,GAAG,IAAK,KAAI,CAAC,GAAGK,KAAK,CAAC,CAACF,GAAG,EAAG,IAAG,CAAC,GAAGL,CAAC,CAAC,CAACK,GAAG,EAAG,EAAC;EAE9C,KAAK,IAAIF,CAAC,GAAGJ,CAAC,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACnCD,GAAG,IAAIN,oBAAoB,CAACW,KAAK,CAACJ,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,CAAC,EAAEI,KAAK,CAACJ,CAAC,GAAG,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC;EACvE;EAEAD,GAAG,IAAI,IAAI;EAEX,OAAOA,GAAG;AACd,CAAC;AAED,SACIX,YAAY,EAAEK,oBAAoB,EAAEC,UAAU,EAAES,kBAAkB"},"metadata":{},"sourceType":"module"}