{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript-graphql-master\\\\client\\\\src\\\\components\\\\funnel\\\\MyFunnelChart.tsx\";\nimport React, { useRef } from 'react';\nimport * as FunnelGraph from 'funnel-graph-js';\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\n//   const containerRef = useRef(null);\n\n//   const options = {\n//     width: 600,\n//     height: 400,\n//     bottomWidth: 1 / 3,\n//     bottomPinch: 1 / 3,\n//     isCurved: true,\n//     curveHeight: 20,\n//     fillType: 'solid',\n//     isInverted: false,\n//   };\n\n//   React.useEffect(() => {\n//     if (containerRef.current) {\n//       const chart = new FunnelGraph(containerRef.current, data, options);\n//       chart.draw();\n//     }\n//   }, [data]);\n\n//   return <div ref={containerRef} />;\n// };\n\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\n//   const containerRef = useRef(null);\n\n//   const options = {\n//     width: 600,\n//     height: 400,\n//     bottomWidth: 1 / 3,\n//     bottomPinch: 1 / 3,\n//     isCurved: true,\n//     curveHeight: 20,\n//     fillType: 'solid',\n//     isInverted: false,\n//   };\n\n//   React.useEffect(() => {\n//     if (containerRef.current && data) {\n//       const chart = new FunnelGraph(containerRef.current, data, options);\n//       chart.draw();\n//     }\n//   }, [data]);\n\n//   return <div ref={containerRef} />;\n// };\nconst MyFunnelChart = _ref => {\n  let {\n    data\n  } = _ref;\n  const containerRef = useRef(null);\n  const options = {\n    width: 600,\n    height: 400,\n    bottomWidth: 1 / 3,\n    bottomPinch: 1 / 3,\n    isCurved: true,\n    curveHeight: 20,\n    fillType: 'solid',\n    isInverted: false\n  };\n  React.useEffect(() => {\n    if (containerRef.current && data) {\n      const chart = new FunnelGraph(containerRef.current, data, options);\n      var graph = new FunnelGraph({\n        container: '.funnel',\n        gradientDirection: 'horizontal',\n        displayPercent: true,\n        direction: 'horizontal'\n      });\n      chart.draw();\n    }\n  }, [data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }\n  });\n};\nexport default MyFunnelChart;","map":{"version":3,"names":["React","useRef","FunnelGraph","MyFunnelChart","data","containerRef","options","width","height","bottomWidth","bottomPinch","isCurved","curveHeight","fillType","isInverted","useEffect","current","chart","graph","container","gradientDirection","displayPercent","direction","draw"],"sources":["D:/react-typescript-graphql-master/client/src/components/funnel/MyFunnelChart.tsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport * as FunnelGraph from 'funnel-graph-js'; \r\n\r\n\r\n\r\n\r\ninterface Props {\r\n  data: {label:string,value:number}[];\r\n}\r\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\r\n//   const containerRef = useRef(null);\r\n\r\n//   const options = {\r\n//     width: 600,\r\n//     height: 400,\r\n//     bottomWidth: 1 / 3,\r\n//     bottomPinch: 1 / 3,\r\n//     isCurved: true,\r\n//     curveHeight: 20,\r\n//     fillType: 'solid',\r\n//     isInverted: false,\r\n//   };\r\n\r\n//   React.useEffect(() => {\r\n//     if (containerRef.current) {\r\n//       const chart = new FunnelGraph(containerRef.current, data, options);\r\n//       chart.draw();\r\n//     }\r\n//   }, [data]);\r\n\r\n//   return <div ref={containerRef} />;\r\n// };\r\n\r\n// const MyFunnelChart: React.FC<Props> = ({data}) => {\r\n//   const containerRef = useRef(null);\r\n\r\n//   const options = {\r\n//     width: 600,\r\n//     height: 400,\r\n//     bottomWidth: 1 / 3,\r\n//     bottomPinch: 1 / 3,\r\n//     isCurved: true,\r\n//     curveHeight: 20,\r\n//     fillType: 'solid',\r\n//     isInverted: false,\r\n//   };\r\n\r\n//   React.useEffect(() => {\r\n//     if (containerRef.current && data) {\r\n//       const chart = new FunnelGraph(containerRef.current, data, options);\r\n//       chart.draw();\r\n//     }\r\n//   }, [data]);\r\n\r\n//   return <div ref={containerRef} />;\r\n// };\r\nconst MyFunnelChart: React.FC<Props> = ({data}) => {\r\n  const containerRef = useRef(null);\r\n    const options = {\r\n    width: 600,\r\n    height: 400,\r\n    bottomWidth: 1 / 3,\r\n    bottomPinch: 1 / 3,\r\n    isCurved: true,\r\n    curveHeight: 20,\r\n    fillType: 'solid',\r\n    isInverted: false,\r\n  };\r\n  \r\n\r\n  React.useEffect(() => {\r\n    if (containerRef.current && data) {\r\n      const chart = new FunnelGraph(containerRef.current, data,options);\r\n      var graph = new FunnelGraph({\r\n        container: '.funnel',\r\n        gradientDirection: 'horizontal',\r\n        displayPercent: true,\r\n        direction: 'horizontal'\r\n    });\r\n      chart.draw();\r\n    }\r\n  }, [data]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nexport default MyFunnelChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAO,KAAKC,WAAW,MAAM,iBAAiB;AAQ9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAMC,aAA8B,GAAG,QAAY;EAAA,IAAX;IAACC;EAAI,CAAC;EAC5C,MAAMC,YAAY,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMK,OAAO,GAAG;IAChBC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,WAAW,EAAE,CAAC,GAAG,CAAC;IAClBC,WAAW,EAAE,CAAC,GAAG,CAAC;IAClBC,QAAQ,EAAE,IAAI;IACdC,WAAW,EAAE,EAAE;IACfC,QAAQ,EAAE,OAAO;IACjBC,UAAU,EAAE;EACd,CAAC;EAGDd,KAAK,CAACe,SAAS,CAAC,MAAM;IACpB,IAAIV,YAAY,CAACW,OAAO,IAAIZ,IAAI,EAAE;MAChC,MAAMa,KAAK,GAAG,IAAIf,WAAW,CAACG,YAAY,CAACW,OAAO,EAAEZ,IAAI,EAACE,OAAO,CAAC;MACjE,IAAIY,KAAK,GAAG,IAAIhB,WAAW,CAAC;QAC1BiB,SAAS,EAAE,SAAS;QACpBC,iBAAiB,EAAE,YAAY;QAC/BC,cAAc,EAAE,IAAI;QACpBC,SAAS,EAAE;MACf,CAAC,CAAC;MACAL,KAAK,CAACM,IAAI,EAAE;IACd;EACF,CAAC,EAAE,CAACnB,IAAI,CAAC,CAAC;EAEV,oBAAO;IAAK,GAAG,EAAEC,YAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG;AACnC,CAAC;AAED,eAAeF,aAAa"},"metadata":{},"sourceType":"module"}