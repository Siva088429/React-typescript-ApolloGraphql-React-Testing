{"version":3,"sources":["graphql/queries/contact.queries.ts","components/common/error.message.tsx","components/common/loading.tsx","components/contact/contact.list.tsx","graphql/mutations/contact.mutations.ts","components/contact/contact.creation.tsx","graphql/apollo.client.ts","components/contact/contact.tsx","AppRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ContactListQuery","gql","ContactDetailQuery","ErrorMessage","props","className","error","toString","Loading","message","ContactList","useQuery","loading","data","contacts","length","map","item","index","key","id","name","email","dateOfBirth","onClick","handleEdit","style","color","cursor","handleDelete","AddContactMutation","UpdateContactMutation","DeleteContactMutation","ContactCreation","initialContcatState","client","useApolloClient","useMutation","addContact","React","contact","setContact","editContactId","query","variables","then","result","handleReset","handleInputChange","e","preventDefault","target","value","onSubmit","mutate","mutation","refetchQueries","console","log","type","placeholder","required","onChange","aria-describedby","max","min","cache","InMemoryCache","freezeResults","apolloClient","ApolloClient","uri","process","assumeImmutableResults","Contact","renderDeleteAllButton","state","marginBottom","handleDeleteAll","setState","editContact","href","role","paddingTop","this","AppRoutes","exact","from","to","path","component","history","createBrowserHistory","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3aa0fb7a.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nexport const ContactListQuery = gql`\r\n{\r\n  contacts {\r\n    id\r\n    name, \r\n    email,\r\n    dateOfBirth\r\n  }\r\n}`;\r\n\r\n\r\nexport const ContactDetailQuery = gql`\r\n  query ($id: ID!) {\r\n    contact(id: $id) {\r\n      id\r\n      name, \r\n      email,\r\n      dateOfBirth\r\n    }\r\n  }`;","import * as React from \"react\";\r\n\r\ninterface IOwnProps {\r\n  error: any;\r\n}\r\n\r\nconst ErrorMessage: React.FC<IOwnProps> = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"error\">\r\n        <small>{props.error.toString()}</small>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import * as React from \"react\";\r\n\r\ninterface IOwnProps {\r\n  message?: any;\r\n}\r\n\r\nconst Loading: React.FC<IOwnProps> = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"loading\">\r\n        <small>{props.message ? props.message : \"Loading...\"}</small>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loading;","import * as React from \"react\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport { IContact } from \"../../models/contact\";\r\nimport { ContactListQuery } from \"../../graphql/queries/contact.queries\";\r\nimport ErrorMessage from \"../common/error.message\";\r\nimport Loading from \"../common/loading\";\r\n\r\n\r\ninterface IOwnProps {\r\n handleDelete: (id: number) => (e: React.MouseEvent) => void;\r\n handleEdit: (id: number) => (e: React.MouseEvent) =>  void;\r\n}\r\n\r\ninterface IData {\r\n  contacts: IContact[];\r\n}\r\n\r\nconst ContactList: React.FC<IOwnProps> = (props) => {\r\n  const { loading, error, data } = useQuery<IData>(ContactListQuery)\r\n  // const detailContactMutation = useQuery<IContact>(ContactDetailtQuery, { variables: { id: id }});\r\n  // console.log(`data=>contacts: ${JSON.stringify(data?.contacts)}`)\r\n  \r\n  if (loading) return <><Loading /></>\r\n  if (error || !data) return <><ErrorMessage error={error} /></>\r\n\r\n  return (\r\n    <>\r\n      <h6>Personal  List</h6>\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-striped table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Date of birth</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data && data.contacts &&\r\n              data.contacts.length > 0 &&\r\n              data.contacts.map((item: any, index: any) => {\r\n                return (\r\n                  <React.Fragment key={index}>\r\n                    <tr>\r\n                      <td>{item.id}</td>\r\n                      <td>{item.name}</td>\r\n                      <td>{item.email}</td>\r\n                      <td>{item.dateOfBirth}</td>\r\n                      <th>\r\n                        <i className=\"fa fa-edit\" onClick={props.handleEdit(item.id)} style={{color: '##0d903c', cursor: 'pointer'}}>&nbsp;</i> | <i className=\"fa fa-trash\" onClick={props.handleDelete(item.id)} style={{color: 'red', cursor: 'pointer'}}>&nbsp;</i>\r\n                      </th>\r\n                    </tr>\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n// export const ContactListAsQuery: React.FC<IOwnProps> = (props) => {\r\n//   return (\r\n//     <>\r\n//       <h6>Contact list</h6>\r\n\r\n//       <Query<IData> query={ContactListQuery}>\r\n//       {\r\n//         ({loading, error, data}) => {\r\n//           if (loading) return <>\"Loading...\"</>\r\n//           if (error || !data) return <>`Error!`</>\r\n\r\n//           return (\r\n//             <>\r\n//             <div className=\"table-responsive\">\r\n//               <table className=\"table table-striped table-sm\">\r\n//                 <thead>\r\n//                   <tr>\r\n//                     <th>#</th>\r\n//                     <th>Name</th>\r\n//                     <th>Email</th>\r\n//                     <th>Date of birth</th>\r\n//                     <th>Actions</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {data && data.contacts &&\r\n//                     data.contacts.length > 0 &&\r\n//                     data.contacts.map((item, index) => {\r\n//                       return (\r\n//                         <React.Fragment key={index}>\r\n//                           <tr>\r\n//                             <td>{item.id}</td>\r\n//                             <td>{item.name}</td>\r\n//                             <td>{item.email}</td>\r\n//                             <td>{item.dateOfBirth}</td>\r\n//                             <th>\r\n//                               <i className=\"fa fa-edit\" onClick={props.handleEdit(item.id)} style={{color: '##0d903c', cursor: 'pointer'}}>&nbsp;</i> | <i className=\"fa fa-trash\" onClick={props.handleDelete(item.id)} style={{color: 'red', cursor: 'pointer'}}>&nbsp;</i>\r\n//                               </th>\r\n//                           </tr>\r\n//                         </React.Fragment>\r\n//                       );\r\n//                     })}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//             </>\r\n//           )\r\n//         }\r\n//       }\r\n//       </Query>\r\n\r\n//     </>\r\n//   );\r\n// };\r\n\r\nexport default ContactList;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const AddContactMutation = gql`\r\n  mutation addContact($name: String!, $email: String!, $dateOfBirth: String!) {\r\n    addContact(name: $name, email: $email, dateOfBirth: $dateOfBirth) {\r\n      id,\r\n      name,\r\n      email,\r\n      dateOfBirth\r\n    }\r\n  }`;\r\n\r\nexport const UpdateContactMutation = gql`\r\n  mutation updateContact($id: ID!, $name: String!, $email: String!, $dateOfBirth: String!) {\r\n    updateContact(id: $id, name: $name, email: $email, dateOfBirth: $dateOfBirth) {\r\n      id,\r\n      name,\r\n      email,\r\n      dateOfBirth\r\n    }\r\n  }`; \r\n\r\nexport const DeleteContactMutation  = gql`\r\n  mutation deleteContact($id: ID!) {\r\n    deleteContact(id: $id)\r\n  }\r\n`;","import * as React from \"react\";\r\nimport { useMutation, useApolloClient } from \"react-apollo\";\r\nimport { IContact } from \"../../models/contact\";\r\nimport { AddContactMutation, UpdateContactMutation } from \"../../graphql/mutations/contact.mutations\";\r\nimport { ContactDetailQuery, ContactListQuery } from \"../../graphql/queries/contact.queries\";\r\n\r\ninterface IOwnProps {\r\n  editContactId?: number;\r\n}\r\n\r\nconst ContactCreation: React.FunctionComponent<IOwnProps> = (\r\n  props: IOwnProps\r\n) => {\r\n  const initialContcatState: IContact = {\r\n    id: 0,\r\n    name: \"\",\r\n    email: \"\",\r\n    dateOfBirth: \"\"\r\n  };\r\n\r\n  const client = useApolloClient();\r\n  \r\n  const [addContact] = useMutation(AddContactMutation);\r\n\r\n  // contact is a state variable\r\n  const [contact, setContact] = React.useState(initialContcatState);\r\n\r\n  React.useEffect(() => {\r\n    if (props.editContactId && props.editContactId! > 0) {\r\n      client.query({query: ContactDetailQuery, variables: {id: props.editContactId}}).then(result => {\r\n        const contact = result.data.contact as IContact\r\n        setContact(contact)\r\n      });\r\n    }\r\n  }, [props.editContactId])\r\n\r\n  const handleReset = () => {\r\n    setContact(initialContcatState);\r\n  }\r\n\r\n  const handleSubmit = (\r\n    e: any // React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\r\n  ) => {\r\n    e.preventDefault();\r\n    // console.log(`ContactCreation::handleSubmit=>contact ${JSON.stringify(contact)}`);\r\n    if (contact.id > 0) {\r\n      client.mutate({mutation: UpdateContactMutation, variables: {\r\n        id: contact.id,\r\n        name: contact.name,\r\n        email: contact.email,\r\n        dateOfBirth: contact.dateOfBirth\r\n      }, refetchQueries: [{query: ContactListQuery}]}).then(result => {\r\n        const contact = result.data.contact as IContact\r\n        console.log(`Updated successfully...`)\r\n      });\r\n    } else {\r\n      addContact({\r\n        variables: {name: contact.name, email: contact.email, dateOfBirth: contact.dateOfBirth},\r\n        refetchQueries: [{query: ContactListQuery}] // to update ContactListQuery on ContactList.tsx\r\n      })\r\n    }\r\n    \r\n    handleReset();\r\n  };\r\n\r\n  /**\r\n   * Common input change event\r\n   * When the field is entered an event is raised and update the state\r\n   */\r\n  const handleInputChange = (\r\n    e: React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    const target = e.target as any;\r\n    setContact(contact => ({ ...contact, [target.name]: target.value }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"card bg-light mb-3\">\r\n          <div className=\"card-header\">Persons Details</div>\r\n          <div className=\"card-body\">\r\n            <div className=\"card-text\">\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={contact.name}\r\n                    placeholder=\"Enter name\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Email address</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={contact.email}\r\n                    placeholder=\"Enter email\"\r\n                    className=\"form-control\"\r\n                    aria-describedby=\"emailHelp\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </small>\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Date of birth</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    max=\"\"\r\n                    min=\"\"\r\n                    name=\"dateOfBirth\"\r\n                    value={contact.dateOfBirth}\r\n                    placeholder=\"Enter date of birth\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n              {contact.id > 0 && <input className=\"btn btn-outline-danger\" type=\"submit\" value=\"Update\" />}{` `}\r\n              {contact.id <= 0 && <input className=\"btn btn-outline-primary\" type=\"submit\" value=\"Save\" />}{` `}\r\n              <input className=\"btn btn-outline-warning\" type=\"button\" value=\"Reset\" onClick={handleReset} />{` `}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactCreation;\r\n","import ApolloClient, { InMemoryCache } from 'apollo-boost';\r\n\r\nconst cache = new InMemoryCache({ freezeResults: true });\r\nconst apolloClient = new ApolloClient({\r\n  cache,\r\n  uri: process.env.REACT_APP_GRAPH_URI,\r\n  assumeImmutableResults: true\r\n});\r\n\r\nexport default apolloClient;","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ContactList from \"../contact/contact.list\";\nimport { IContact } from \"../../models/contact\";\nimport ContactCreation from \"../contact/contact.creation\";\nimport apolloClient from \"../../graphql/apollo.client\";\nimport { ContactListQuery } from \"../../graphql/queries/contact.queries\";\nimport { DeleteContactMutation } from \"../../graphql/mutations/contact.mutations\";\n\ninterface IOwnState {\n  contacts: IContact[];\n  editContact?: IContact;\n  editContactId?: number;\n}\n\ntype IUnionProps = RouteComponentProps<any>;\n\nclass Contact extends React.Component<IUnionProps, IOwnState> {\n  constructor(props: IUnionProps) {\n    super(props);\n\n    const initialContcatState: IContact = {\n      id: 0,\n      name: \"\",\n      email: \"\",\n      dateOfBirth: \"\"\n    };\n\n    this.state = {\n      contacts: [],\n      editContact: initialContcatState,\n      editContactId: 0\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/#/\">\n            <i className=\"fa fa-home\">{``}</i>React Typescript App\n          </a>\n        </nav>\n\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n              <div className=\"sidebar-sticky\">\n                <ul className=\"nav flex-column\">\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link active\" href=\"/\">\n                      <i className=\"fa fa-users\">{``}</i>Users{` `}\n                      <span className=\"sr-only\">(current)</span>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </nav>\n          </div>\n\n          <div role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n            {/* <div className=\"row\" style={{ paddingTop: \"2px\" }}>\n              <div className=\"col-md-12\">{``}</div>\n            </div> */}\n            <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n              <h1 className=\"h2\">Contact</h1>\n            </div>\n            <div className=\"row\" style={{ paddingTop: \"50px\" }}>\n              <div className=\"col-md-12\">{``}</div>\n            </div>\n  \n            \n            <ContactCreation\n              editContactId={this.state.editContactId}\n            />\n            \n            <ContactList\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n\n            {/* {this.renderDeleteAllButton()} */}\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  renderDeleteAllButton = () => {\n    const { contacts } = this.state\n    if (contacts && contacts.length > 0) {\n      return (\n        <>\n          <div className=\"row\">\n            <div className=\"col-md-12\" style={{ marginBottom: \"10px\" }}>\n              <button className=\"btn btn-warning\" onClick={this.handleDeleteAll}>\n                Delete all\n              </button>\n            </div>\n          </div>\n        </>\n      );\n    } else {\n      return null\n    }\n  };\n\n  handleDelete = (id: number) => (e: React.MouseEvent) => {\n    apolloClient.mutate({mutation: DeleteContactMutation, variables: {\n      id: id,\n    }, refetchQueries: [{query: ContactListQuery}]}).then(result => {\n      console.log(`Deleted successfully...`)\n    });\n  };\n\n  handleEdit = (id: number) => (e: React.MouseEvent) => {    \n    this.setState({editContactId: id})\n  };\n\n  handleDeleteAll = () => {\n    console.log(`TODO: implement delete all functionnality`)\n  };\n}\n\nexport default Contact;\n","import * as React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Contact from \"./components/contact/contact\";\r\n\r\nexport const AppRoutes: React.FC = () => (\r\n  <Switch>\r\n    <Redirect exact={true} from={`/`} to={\"/contact\"} />\r\n    <Route exact={true} path={\"/contact\"} component={Contact} />\r\n  </Switch>\r\n\r\n);\r\n","import * as React from \"react\";\r\nimport { BrowserRouter, Router } from \"react-router-dom\";\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"./styles/dashboard.css\";\r\nimport { AppRoutes } from \"./AppRoutes\";\r\nimport apolloClient from \"./graphql/apollo.client\";\r\n\r\n\r\n\r\n\r\nconst history = createBrowserHistory();\r\n\r\nclass App extends React.Component<{}, {}> {\r\n\r\n  render() {\r\n    console.log(`process.env.GRAPH_URI : ${process.env.REACT_APP_GRAPH_URI}`)\r\n    return (\r\n      <>\r\n        <ApolloProvider client={apolloClient}>\r\n          <BrowserRouter>\r\n            <Router history={history}>\r\n              <AppRoutes />\r\n            </Router>\r\n          </BrowserRouter>\r\n        </ApolloProvider>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}